###################################################
#            Project Templated Makefile           #
###################################################
# Need to define
# - PROJ_NAME
# - PROJ_OBJS
# before including this
# C.F. http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/)

# Tools Defs:
CC      := gcc
CXX     := g++
LD      := ld
FLEX    := flex
BISON   := bison
READELF := readelf
OBJCOPY := objcopy
SIZE    := size

# Compact printers
_P_CC_1     = @echo "  CC       $<";
_P_CXX_1    = @echo "  CXX      $<";
_P_LD_1     = @echo "  LD       $@";
_P_AS_1     = @echo "  AS       $<";
_P_AR_1     = @echo "  AR       $@";
_P_AR_1     = @echo "  AR       $@";
_P_FLEX_1   = @echo "  FLEX     $<";
_P_BISON_1  = @echo "  BISON    $<";
_P_OBJCPY_1 = @echo "  OBJCOPY  $@";
_P_HEX_1    = @echo "  HEX      $@";
_P_BIN_1    = @echo "  BIN      $@";
_P_SIZE_1   = @echo "  SIZE     $<";
_P_GEN_1    = @echo "  GEN      $@";

# compact print enabled by default
ifndef V
	V := 1
endif

# directory defs
BUILDIR := build
SRCDIR  := src

# filexts
C_EXT     := c
CXX_EXT   := cpp
MKDEP_EXT := mk
OBJ_EXT   := o
FLEX_EXT  := l
BISON_EXT := y


PROJECT_ROOT := .

# Common compiler settings
# some GCC magic flags to autogen deps. In order:
# -MT $@ : set name of target in the dep makefile to be the original target
#   name in the main makefile
# -MMD : generate dependency information as a side effect of compilation,
#   ignoring system header deps (use -MD to include systen deps)
# -MP : add a target for each prereq to the list (in generated dep Makefile)
# -MF $(BUILDIR)/$*.mk : write the generated dep file to the listed path
DEPFLAGS = -MT $@ -MMD -MP -MF $(BUILDIR)/$*.mk

# C compiler settings
CFLAGS   +=
CXXFLAGS +=
INCLUDES +=

# linker config
LDFLAGS +=
LDLIBS  +=

# Base commands
CC.C   = $(CC) $(CSTD) $(CFLAGS) $(DEPFLAGS) $(INCLUDES)
CC.CXX = $(CXX) $(CXXSTD) $(CXXFLAGS) $(DEPFLAGS) $(INCLUDES)
LD.C   = $(CC) $(LDFLAGS)
LD.CXX = $(CXX) $(LDFLAGS)

# Common Macros
# Must use deferred assignment to ensure that $(call ...) can replace the
# vars
wrap = $(addprefix $(1)/,$(addsuffix $(2),$(3)))
objpath = $(addprefix $(2)/,$(addsuffix .$(OBJ_EXT),$(1)))
INDENT_OUT := sed 's/^/     /'

# build list of autogenerated sources
AUTOGENSRCS := $(addprefix $(BUILDIR)/, $(AUTOGEN_SOURCES))
# disable default rules
.SUFFIXES:

###################################################
#         BEGIN MAKEFILE IMPLEMENTATION           #
###################################################
PROJ_DEPS := $(call objpath,$(PROJ_OBJS),$(BUILDIR))

.DEFAULT_GOAL := all
.PHONY: all
all: $(BUILDIR)/$(PROJ_NAME)

# primary target
$(BUILDIR)/$(PROJ_NAME): $(PROJ_DEPS) | $(BUILDIR)
	$(_P_LD_$(V))$(LD.CXX) -o $@  $^ $(LDLIBS)
	@cp $@ .

.PRECIOUS: $(BUILDIR)/%.tab.$(CXX_EXT) $(BUILDIR)/%.yy.$(CXX_EXT)
# object build targets (with the dep Makefiles listed as deps so that the files
# are rebuilt if the dependency files go missing for any reason
$(BUILDIR)/%.yy.$(CXX_EXT): %.$(FLEX_EXT) | $(BUILDIR)
	$(_P_FLEX_$(V))$(FLEX) -o $@ $<
$(BUILDIR)/%.tab.$(CXX_EXT) $(BUILDIR)/%.tab.hpp: %.$(BISON_EXT) | $(BUILDIR)
	$(_P_BISON_$(V))$(BISON) -d -o $@ $<
$(BUILDIR)/%.$(OBJ_EXT): %.$(C_EXT) $(BUILDIR)/%.$(MKDEP_EXT) | $(BUILDIR) $(AUTOGENSRCS)
	$(_P_CC_$(V))$(CC.C) -I$(SRCDIR) -I$(BUILDIR)/ -o $@ -c $<
$(BUILDIR)/%.$(OBJ_EXT): %.$(CXX_EXT) $(BUILDIR)/%.$(MKDEP_EXT) | $(BUILDIR) $(AUTOGENSRCS)
	$(_P_CXX_$(V))$(CC.CXX) -I$(SRCDIR) -I$(BUILDIR)/ -o $@ -c $<
$(BUILDIR)/%.$(OBJ_EXT): $(BUILDIR)/%.$(CXX_EXT) $(BUILDIR)/%.$(MKDEP_EXT) | $(BUILDIR) $(AUTOGENSRCS)
	$(_P_CXX_$(V))$(CC.CXX) -I$(SRCDIR) -I$(BUILDIR) -o $@ -c $<

# phony targets
.PHONY: clean
clean:
	rm -rf $(BUILDIR) $(PROJ_NAME)

.PHONY: compiledb
compiledb:
	rm -f compile_commands.json
	$(MAKE) -Bnkw V=0 all > build.log
	compiledb < build.log
	rm -f build.log

.PHONY: format
format:
	@echo "Running clang-format";clang-format -i --verbose $(SRCDIR)/*.{c,cpp,h}

# autogen deps includes and boilerplate to make everything just work (tm)
# target for buildir
$(BUILDIR):
	@mkdir -p $@
# define autogen'd deps files
C_SOURCES     := $(shell find . -name '*.c')
CXX_SOURCES   := $(shell find . -name '*.cpp')
SRC_DEP_FILES := $(addprefix $(BUILDIR)/,$(notdir $(C_SOURCES:.$(C_EXT)=.$(MKDEP_EXT))))
SRC_DEP_FILES += $(addprefix $(BUILDIR)/,$(notdir $(CXX_SOURCES:.$(CXX_EXT)=.$(MKDEP_EXT))))
SRC_DEP_FILES += $(addprefix $(BUILDIR)/,$(addsuffix .$(MKDEP_EXT),$(basename $(AUTOGEN_SOURCES))))
# these empty targets are here to allow make to track the dependency files as
# deps themselves
$(SRC_DEP_FILES):

# include generated dependency files so objects are remade correctly
include $(wildcard $(SRC_DEP_FILES)) 
